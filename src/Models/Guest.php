<?php

/**
 *
 *  MVC
 *  Model View Controller (MVC) design pattern for simple web applications.
 *
 *  @see     https://github.com/fabiodoppio/mvc
 *
 *  @author  Fabio Doppio (Developer) <hallo@fabiodoppio.de>
 *  @license https://opensource.org/license/mit/ MIT License
 *
 */


namespace MVC\Models;

use MVC\App         as App;
use MVC\Database    as Database;
use MVC\Exception   as Exception;
use MVC\Mailer      as Mailer;
use MVC\Models      as Model;
use MVC\Template    as Template;

/**
 *
 *  Guest Class
 *
 *  The Guest class represents a guest user account with limited functionality.
 *  It provides methods for accessing and managing guest account data stored in the session.
 *
 */
class Guest extends Model\Model {

    /**
     *
     *  Constructor method for the Guest class.
     *
     *  If the session does not contain guest account data, it initializes
     *  the session with default values for a guest account, including a unique
     *  token generated by the Auth class.
     *
     *  @since 2.0
     *
     */
    public function __construct() {
        if (empty($_SESSION["guest"] ?? []))
            $_SESSION["guest"] = [
                "data" => [
                    "token" => App::generate_token(),
                    "role" => Model\Account::GUEST,
                    "lastaction" => "",
                    "registered" => date('Y-m-d H:i:s', time()),
                    "meta" => [
                        "language" => $_COOKIE["locale"] ?? App::get("APP_LANGUAGE")
                    ]
                ]
            ];
    }

    /**
     *
     *  Get a specific attribute of the guest account.
     *
     *  @since  2.0
     *  @param  string      $name   The name of the attribute
     *  @return mixed|null          The value of the attribute, or null if not found
     *
     */
    public function get(string $name) {
        return $_SESSION["guest"]["data"][$name] ?? $_SESSION["guest"]["data"]["meta"][$name] ?? null;
    }

    /**
     *
     *  Set a specific attribute of the guest account.
     *
     *  @since  2.0
     *  @param  string  $name   The name of the attribute
     *  @param  mixed   $value  The new value of the attribute
     *
     */
    public function set(string $name, mixed $value) {
        if (isset($_SESSION["guest"]["data"][$name]))
            $_SESSION["guest"]["data"][$name] = $value;
        else
            $_SESSION["guest"]["data"]["meta"][$name] = $value;
    }

    /**
     *
     *  Add an event to the guests log.
     *
     *  @since  2.0
     *  @param  string      $event      The event to be added to the log
     *
     */
    public function log(string $event) {
        $_SESSION["guest"]["log"][] = $event;
    }

    /**
     *
     *  Get all data associated with the guest account.
     *
     *  @since  2.0
     *  @return array   An array containing all the data
     *
     */
    public function get_data() {
        return $_SESSION["guest"]["data"];
    }

    /**
     *
     *  Get the guests role name.
     *
     *  @since  3.0
     *
     */
    public function get_role_name() {
        return _("Guest");
    }

    /**
     *
     *  Delete model.
     *
     *  @since  2.0
     *
     */
    public function delete() {
        unset($_SESSION["guest"]);
        session_regenerate_id();
    }

    /**
     *
     *  Sign up a new account.
     *
     *  @since  2.4     Added welcome mail.
     *  @since  2.0
     *  @param  string  $username   Username for the new account
     *  @param  string  $email      Email address for the new account
     *  @param  string  $password   Password for the new account
     *
     */
    public function signup(string $username, string $email, string $password) {
        if (!empty(Database::query("SELECT id FROM app_accounts WHERE username LIKE ?",[$username])[0]))
            throw new Exception(_("This username is already taken."), 2000);

        if (!empty(Database::query("SELECT id FROM app_accounts WHERE email LIKE ?", [$email])[0]))
            throw new Exception(_("This email address is already taken."), 2001);

        $token = App::generate_token();
        Database::query("INSERT INTO app_accounts (email, username, password, token, role) VALUES (?, ?, ?, ?, ?)", [strtolower($email), $username, password_hash($password, PASSWORD_DEFAULT), $token, Model\Account::USER]);

        $account = new Model\Account(Database::$insert_id);
        $account->set("language",  $_COOKIE["locale"] ?? App::get("APP_LANGUAGE"));

        if (App::get("NOTIFY_WELCOME"))
            Mailer::send(sprintf(_("Welcome %1\$s | %2\$s"), $account->get("username"), App::get("APP_NAME")), $account->get("email"), Template::get("/_emails/accountWelcome.tpl", [
                "app" => (object) [
                    "url" => App::get("APP_URL"),
                    "name" => App::get("APP_NAME"),
                ],
                "account" => (object) [
                    "username" => $account->get("username")
                ]
            ]));

        if (App::get("NOTIFY_NEWACCOUNT")) {
            App::set_locale_runtime(App::get("APP_LANGUAGE"));
            Mailer::send(sprintf(_("New Account | %s"), App::get("APP_NAME")), App::get("MAIL_RECEIVER"), Template::get("/_emails/adminNewAccount.tpl", [
                "var" => (object) [
                    "username"  => $account->get("username")
                ],
                "app" => (object) [
                    "url" => App::get("APP_URL"),
                    "name" => App::get("APP_NAME")
                ]
            ]));
            App::set_locale_runtime($_COOKIE["locale"] ?? App::get("APP_LANGUAGE"));
        }

        App::set_auth_cookie($account->get("id"), $token);
    }

}

?>